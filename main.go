package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

const (
	fileHeader = `
// DO NOT edit this file
// this file was generated automatically
// simply run ` + "`" + `go generate` + "`" + ` in this directory to regenerate

package res

import (
	"fmt"
	"html/template"
)

var (
	Template = template.New("")
	Styles = make(map[string][]byte, 0)
)

func genInit() {
	var err error
`
	templateDecl = `
	_, err = Template.Parse(%#[2]v)
	if err != nil {
		panic(fmt.Sprintf("error parsing %[1]s - %%v", err))
	}
`
	styleDecl = `
	Styles[%#v] = []byte(%#v)
`
	fileFooter = `
}
// end of generated file
`
)

var (
	outFile     *os.File
	dataDir     string
	outFileName string
)

func panicIf(err error) {
	if err != nil {
		panic(err)
	}
}

func genGoFile(fPath string, info os.FileInfo, err error) error {
	panicIf(err)
	if info.IsDir() {
		return nil
	}
	normPath, err := filepath.Rel(dataDir, fPath)
	panicIf(err)
	switch filepath.Ext(normPath) {
	case ".tmpl":
		b, err := ioutil.ReadFile(fPath)
		panicIf(err)
		fmt.Fprintf(outFile, templateDecl, normPath, string(b))
	case ".css":
		b, err := ioutil.ReadFile(fPath)
		panicIf(err)
		fmt.Fprintf(outFile, styleDecl, normPath, string(b))
	}
	return nil
}

func init() {
	flag.Parse()
	dataDir = flag.Arg(0)
	resFilename = flag.Arg(1)
}

func main() {
	const outFileFlags = os.O_CREATE | os.O_WRONLY | os.O_TRUNC
	var err error
	outFile, err = os.OpenFile(resFilename, outFileFlags, 0660)
	panicIf(err)
	defer outFile.Close()
	fmt.Fprint(outFile, fileHeader)
	err = filepath.Walk(dataDir, genGoFile)
	panicIf(err)
	fmt.Fprint(outFile, fileFooter)
}
